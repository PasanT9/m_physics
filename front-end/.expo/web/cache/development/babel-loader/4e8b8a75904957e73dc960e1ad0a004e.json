{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Projects\\\\m_physics\\\\front-end\\\\node_modules\\\\expo-ui-kit\\\\src\\\\Input.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport expoTheme from \"./theme\";\nimport { mergeTheme, rgba } from \"./utils/index\";\nexport var INITIAL_STATE = {\n  value: null,\n  focused: false,\n  blurred: false\n};\nexport var change = function change(value) {\n  return {\n    type: \"change\",\n    payload: {\n      value: value\n    }\n  };\n};\nexport var focus = function focus() {\n  return {\n    type: \"focus\"\n  };\n};\nexport var blur = function blur() {\n  return {\n    type: \"blur\"\n  };\n};\nexport var reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"change\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: action.payload.value\n      });\n\n    case \"focus\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focused: true,\n        blurred: false\n      });\n\n    case \"blur\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focused: false,\n        blurred: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar Input = function Input(props) {\n  var _useReducer = useReducer(reducer, INITIAL_STATE),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var handleValidation = function handleValidation(value) {\n    var pattern = props.pattern;\n    if (!pattern) return true;\n\n    if (typeof pattern === \"string\") {\n      var condition = new RegExp(pattern, \"g\");\n      return condition.test(value);\n    }\n\n    if (typeof pattern === \"object\") {\n      var conditions = pattern.map(function (rule) {\n        return new RegExp(rule, \"g\");\n      });\n      return conditions.map(function (condition) {\n        return condition.test(value);\n      });\n    }\n  };\n\n  var handleChange = function handleChange(value) {\n    var onChangeText = props.onChangeText,\n        onValidation = props.onValidation;\n    var isValid = handleValidation(value);\n    dispatch(change(value));\n    onValidation && onValidation(isValid);\n    onChangeText && onChangeText(value);\n  };\n\n  var handleFocus = function handleFocus(event) {\n    var onFocus = props.onFocus;\n    dispatch(focus());\n    onFocus && onFocus(event);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var onBlur = props.onBlur;\n    dispatch(blur());\n    onBlur && onBlur(event);\n  };\n\n  var handleTextType = function handleTextType(type) {\n    return type === \"email\" ? \"emailAddress\" : type === \"phone\" ? \"telephoneNumber\" : type;\n  };\n\n  var autoCorrect = props.autoCorrect,\n      autoCapitalize = props.autoCapitalize,\n      placeholder = props.placeholder,\n      children = props.children,\n      borderWidth = props.borderWidth,\n      borderColor = props.borderColor,\n      type = props.type,\n      style = props.style,\n      theme = props.theme,\n      internalRef = props.internalRef,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onChangeText = props.onChangeText,\n      rest = _objectWithoutProperties(props, [\"autoCorrect\", \"autoCapitalize\", \"placeholder\", \"children\", \"borderWidth\", \"borderColor\", \"type\", \"style\", \"theme\", \"internalRef\", \"onFocus\", \"onBlur\", \"onChangeText\"]);\n\n  var _mergeTheme = mergeTheme(_objectSpread({}, expoTheme), theme),\n      SIZES = _mergeTheme.SIZES,\n      COLORS = _mergeTheme.COLORS;\n\n  var textStyles = StyleSheet.flatten([{\n    borderWidth: 1,\n    height: SIZES.base * 5.5,\n    borderRadius: SIZES.radius,\n    borderColor: rgba(COLORS.primary, 0.4),\n    paddingHorizontal: SIZES.base,\n    fontSize: SIZES.font\n  }, borderWidth && {\n    borderWidth: borderWidth\n  }, borderColor && {\n    borderColor: borderColor\n  }, style]);\n  var textType = handleTextType(type);\n  var internalProps = {\n    style: textStyles,\n    autoCorrect: autoCorrect,\n    autoCapitalize: autoCapitalize,\n    placeholder: placeholder,\n    textContentType: textType,\n    value: state.value,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChange\n  };\n  return React.createElement(TextInput, _extends({\n    ref: internalRef\n  }, props, internalProps, {\n    testID: \"text-input\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nInput.defaultProps = {\n  pattern: null,\n  onFocus: null,\n  onBlur: null,\n  onChangeText: null,\n  onValidation: null,\n  placeholder: null,\n  autoCorrect: false,\n  autoCapitalize: \"none\",\n  internalRef: null,\n  theme: {},\n  style: {}\n};\nexport default Input;","map":{"version":3,"sources":["C:/Projects/m_physics/front-end/node_modules/expo-ui-kit/src/Input.js"],"names":["React","useReducer","expoTheme","mergeTheme","rgba","INITIAL_STATE","value","focused","blurred","change","type","payload","focus","blur","reducer","state","action","Input","props","dispatch","handleValidation","pattern","condition","RegExp","test","conditions","map","rule","handleChange","onChangeText","onValidation","isValid","handleFocus","event","onFocus","handleBlur","onBlur","handleTextType","autoCorrect","autoCapitalize","placeholder","children","borderWidth","borderColor","style","theme","internalRef","rest","SIZES","COLORS","textStyles","StyleSheet","flatten","height","base","borderRadius","radius","primary","paddingHorizontal","fontSize","font","textType","internalProps","textContentType","defaultProps"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport { StyleSheet, TextInput } from \"react-native\";\n\nimport expoTheme from \"./theme\";\nimport { mergeTheme, rgba } from \"./utils/index\";\n\nexport const INITIAL_STATE = {\n  value: null,\n  focused: false,\n  blurred: false\n};\n\nexport const change = (value) => {\n  return { type: \"change\", payload: { value } };\n};\nexport const focus = () => {\n  return { type: \"focus\" };\n};\nexport const blur = () => {\n  return { type: \"blur\" };\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"change\":\n      return { ...state, value: action.payload.value };\n    case \"focus\":\n      return { ...state, focused: true, blurred: false };\n    case \"blur\":\n      return { ...state, focused: false, blurred: true };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  const handleValidation = (value) => {\n    const { pattern } = props;\n    if (!pattern) return true;\n\n    // string pattern, one validation rule\n    if (typeof pattern === \"string\") {\n      const condition = new RegExp(pattern, \"g\");\n      return condition.test(value);\n    }\n\n    // array patterns, multiple validation rules\n    if (typeof pattern === \"object\") {\n      const conditions = pattern.map((rule) => new RegExp(rule, \"g\"));\n      return conditions.map((condition) => condition.test(value));\n    }\n  };\n\n  const handleChange = (value) => {\n    const { onChangeText, onValidation } = props;\n    const isValid = handleValidation(value);\n    dispatch(change(value));\n    onValidation && onValidation(isValid);\n    onChangeText && onChangeText(value);\n  };\n\n  const handleFocus = (event) => {\n    const { onFocus } = props;\n    dispatch(focus());\n    onFocus && onFocus(event);\n  };\n\n  const handleBlur = (event) => {\n    const { onBlur } = props;\n    dispatch(blur());\n    onBlur && onBlur(event);\n  };\n\n  const handleTextType = (type) => {\n    return type === \"email\"\n      ? \"emailAddress\"\n      : type === \"phone\"\n      ? \"telephoneNumber\"\n      : type;\n  };\n\n  const {\n    autoCorrect,\n    autoCapitalize,\n    placeholder,\n    children,\n    borderWidth,\n    borderColor,\n    type,\n    style,\n    theme,\n    internalRef,\n    onFocus,\n    onBlur,\n    onChangeText,\n    ...rest\n  } = props;\n  const { SIZES, COLORS } = mergeTheme({ ...expoTheme }, theme);\n\n  const textStyles = StyleSheet.flatten([\n    {\n      borderWidth: 1,\n      height: SIZES.base * 5.5,\n      borderRadius: SIZES.radius,\n      borderColor: rgba(COLORS.primary, 0.4),\n      paddingHorizontal: SIZES.base,\n      fontSize: SIZES.font\n    },\n    borderWidth && { borderWidth },\n    borderColor && { borderColor },\n    style\n  ]);\n  const textType = handleTextType(type);\n\n  const internalProps = {\n    style: textStyles,\n    autoCorrect,\n    autoCapitalize,\n    placeholder,\n    textContentType: textType,\n    value: state.value,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChange\n  };\n\n  return (\n    <TextInput\n      ref={internalRef}\n      {...props}\n      {...internalProps}\n      testID=\"text-input\">\n      {children}\n    </TextInput>\n  );\n};\n\nInput.defaultProps = {\n  pattern: null,\n  onFocus: null,\n  onBlur: null,\n  onChangeText: null,\n  onValidation: null,\n  placeholder: null,\n  autoCorrect: false,\n  autoCapitalize: \"none\",\n  internalRef: null,\n  theme: {},\n  style: {}\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}