{"ast":null,"code":"var removeHash = function removeHash(hex) {\n  return hex.charAt(0) === \"#\" ? hex.slice(1) : hex;\n};\n\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\" + nakedHex.slice(0, 1) + nakedHex.slice(0, 1) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\" + nakedHex.slice(1, 2) + nakedHex.slice(1, 2) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\" + nakedHex.slice(2, 3) + nakedHex.slice(2, 3) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\" + nakedHex.slice(3, 4) + nakedHex.slice(3, 4) : nakedHex.slice(6, 8)) || \"ff\";\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\n\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n      g = decimalObject.g,\n      b = decimalObject.b,\n      parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n};\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\n\nexport default hexToRgba;","map":{"version":3,"sources":["C:/Projects/m_physics/front-end/node_modules/expo-ui-kit/src/utils/rgba.js"],"names":["removeHash","hex","charAt","slice","parseHex","nakedHex","isShort","length","twoDigitHexR","twoDigitHexG","twoDigitHexB","twoDigitHexA","r","g","b","a","hexToDecimal","parseInt","hexesToDecimals","toFixed","isNumeric","n","isNaN","parseFloat","isFinite","formatRgb","decimalObject","parameterA","parsedA","hexToRgba","hashlessHex","hexObject"],"mappings":"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","sourcesContent":["// Source file: https://github.com/misund/hex-to-rgba/blob/master/src/index.js\n// NPM: https://www.npmjs.com/package/hex-to-rgba\n// GitHub: https://github.com/misund/hex-to-rgba\n\nconst removeHash = (hex) => (hex.charAt(0) === \"#\" ? hex.slice(1) : hex);\n\nconst parseHex = (nakedHex) => {\n  const isShort = nakedHex.length === 3 || nakedHex.length === 4;\n\n  const twoDigitHexR = isShort\n    ? `${nakedHex.slice(0, 1)}${nakedHex.slice(0, 1)}`\n    : nakedHex.slice(0, 2);\n  const twoDigitHexG = isShort\n    ? `${nakedHex.slice(1, 2)}${nakedHex.slice(1, 2)}`\n    : nakedHex.slice(2, 4);\n  const twoDigitHexB = isShort\n    ? `${nakedHex.slice(2, 3)}${nakedHex.slice(2, 3)}`\n    : nakedHex.slice(4, 6);\n  const twoDigitHexA =\n    (isShort\n      ? `${nakedHex.slice(3, 4)}${nakedHex.slice(3, 4)}`\n      : nakedHex.slice(6, 8)) || \"ff\";\n\n  // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nconst hexToDecimal = (hex) => parseInt(hex, 16);\n\nconst hexesToDecimals = ({ r, g, b, a }) => ({\n  r: hexToDecimal(r),\n  g: hexToDecimal(g),\n  b: hexToDecimal(b),\n  a: +(hexToDecimal(a) / 255).toFixed(2)\n});\n\nconst isNumeric = (n) => !isNaN(parseFloat(n)) && isFinite(n); // eslint-disable-line no-restricted-globals, max-len\n\nconst formatRgb = (decimalObject, parameterA) => {\n  const { r, g, b, a: parsedA } = decimalObject;\n  const a = isNumeric(parameterA) ? parameterA : parsedA;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param hex - The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param a - An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\nconst hexToRgba = (hex, a) => {\n  const hashlessHex = removeHash(hex);\n  const hexObject = parseHex(hashlessHex);\n  const decimalObject = hexesToDecimals(hexObject);\n\n  return formatRgb(decimalObject, a);\n};\n\n/**\n * Accepts only HEX colors\n * - 1st param: hex value\n * - 2nd param: alpha value 0 to 1, accepted decimal\n *\n * Usage:\n * cont blue10 = Utils.rgba(\"#4630EB\", 0.5)\n * return new hex value with alpha 0.5\n */\n\nexport default hexToRgba;\n"]},"metadata":{},"sourceType":"module"}